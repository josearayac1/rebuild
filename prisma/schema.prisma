// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  PROFESSIONAL
  OWNER
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String
  password        String
  userType        UserType
  profileCompleted Boolean  @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones 1:1 con perfiles
  ownerProfile    OwnerProfile?
  professionalProfile ProfessionalProfile?
  
  // Datos de recuperación de contraseña
  resetToken      String?
  resetTokenExpiry DateTime?
}

model Region {
  id          String    @id @default(cuid())
  name        String    @unique // Nombre de la región
  ordinal     String    // Número romano de la región

  // Relaciones
  cities      City[]    // Relación con ciudades
  properties  Property[]
  ownerProfiles     OwnerProfile[]
  professionalProfiles ProfessionalProfile[]
  inspections Inspection[] 
}

model City {
  id          String    @id @default(cuid())
  name        String    @unique // Nombre de la ciudad
  
  // Relaciones
  regionId    String
  region      Region    @relation(fields: [regionId], references: [id])
  communes    Commune[] // Relación con comunas
  properties  Property[]
  ownerProfiles     OwnerProfile[]
  professionalProfiles ProfessionalProfile[]
  inspections Inspection[] 
}

model Commune {
  id          String    @id @default(cuid())
  name        String    @unique // Nombre de la comuna

  
  // Relaciones
  cityId      String
  city        City      @relation(fields: [cityId], references: [id])
  properties  Property[]
  ownerProfiles     OwnerProfile[]
  professionalProfiles ProfessionalProfile[]
  inspections Inspection[]
}

model OwnerProfile {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  phone           String    
  address         String    
  company         String?   // Opcional
  profilePicture   String?   
  
  // Relaciones Ubicación
  region      Region    @relation(fields: [regionId], references: [id])
  regionId    String
  city        City      @relation(fields: [cityId], references: [id])
  cityId      String
  commune     Commune   @relation(fields: [communeId], references: [id])
  communeId   String
  
  // Relaciones
  properties  Property[]
}

model ProfessionalProfile {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  phone           String    
  profession      String    
  experience      Int       
  specialties     String[]  
  profilePicture   String?  
  

  // Relaciones Ubicación
  region      Region    @relation(fields: [regionId], references: [id])
  regionId    String
  city        City      @relation(fields: [cityId], references: [id])
  cityId      String
  commune     Commune   @relation(fields: [communeId], references: [id])
  communeId   String
  
  // Relaciones
  inspections Inspection[]
}

model Status {
  id         String    @id @default(cuid())
  name       String    @unique
  properties Property[] // Relación Property
}

model PropertyType {
  id         String    @id @default(cuid())
  name       String    @unique
  properties Property[] // Relación Property
}

model Property {
  id            Int          @id @default(autoincrement())
  bedrooms      Int
  bathrooms     Int
  innerArea       Float // Cambiar a innerArea
  terraceArea       Float? // Cambiar a terraceArea
  address       String
  estateCompany String // Agregar estateCompany (inmobiliaria)
  estateProject String // Agregar estateProject (proyecto inmobiliario)
  unitNumber    String // Agregar unitNumber (numero de unidad)

  // Relaciones Status y PropertyType (Dropdown)
  statusId      String  
  status        Status  @relation(fields: [statusId], references: [id])
  propertyTypeId String  
  propertyType   PropertyType @relation(fields: [propertyTypeId], references: [id])

  // Relaciones
  ownerId       String
  owner         OwnerProfile @relation(fields: [ownerId], references: [id])
  photos        PropertyPhoto[]
  inspections   Inspection[]
  
  // Relaciones Ubicación
  communeId     String
  commune       Commune    @relation(fields: [communeId], references: [id])
  cityId        String
  city          City       @relation(fields: [cityId], references: [id])
  regionId      String
  region        Region     @relation(fields: [regionId], references: [id])
}

model PropertyPhoto {
  id          Int      @id @default(autoincrement())
  url         String

  // Relaciones
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id])
}

model Inspection {
  id          String       @id @default(cuid())
  status      Boolean      @default(false)
  createdAt   DateTime     @default(now())

  // Relaciones
  property    Property     @relation(fields: [propertyId], references: [id])
  propertyId  Int          // Cambiado de String a Int para coincidir con el tipo de Property.id
  inspector   ProfessionalProfile @relation(fields: [inspectorId], references: [id])
  inspectorId String

  // Relaciones Ubicación
  communeId     String
  commune       Commune    @relation(fields: [communeId], references: [id])
  cityId        String
  city          City       @relation(fields: [cityId], references: [id])
  regionId      String
  region        Region     @relation(fields: [regionId], references: [id])
} 